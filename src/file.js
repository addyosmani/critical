const path = require('path');
const os = require('os');
const url = require('url');
const fs = require('fs-extra');
const findUp = require('find-up');
const globby = require('globby');
const isGlob = require('is-glob');
const postcss = require('postcss');
const postcssUrl = require('postcss-url');
const Vinyl = require('vinyl');
const oust = require('oust');
const got = require('got');
const chalk = require('chalk');
const parseCssUrls = require('css-url-parser');
const tempy = require('tempy');
const slash = require('slash');
const debug = require('debug')('critical:file');
const {mapAsync, filterAsync, reduceAsync} = require('./array');
const {FileNotFoundError} = require('./errors');

const BASE_WARNING = `${chalk.yellow('Warning:')} Missing base path. Consider 'base' option. https://goo.gl/PwvFVb`;

const warn = text => process.stderr.write(chalk.yellow(`${text}${os.EOL}`));

/**
 * Fixup slashes in file paths for windows
 * @param {string} str Path
 * @returns {string} Normalized path
 */
function normalizePath(str) {
  return process.platform === 'win32' ? slash(str) : str;
}

/**
 * Check wether a resource is external or not
 * @param {string} href Path
 * @returns {boolean} True if the path is remote
 */
function isRemote(href) {
  return /(^\/\/)|(:\/\/)/.test(href);
}

/**
 * Check wether a resource is relative or not
 * @param {string} href Path
 * @returns {boolean} True if the path is relative
 */
function isRelative(href) {
  return !isRemote(href) && !path.isAbsolute(href);
}

/**
 * Wrapper for File.isVinyl to detect vinyl objects generated by gulp (vinyl < v0.5.6)
 * @param {*} file Object to check
 * @returns {boolean} True if it's a valid vinyl object
 */
function isVinyl(file) {
  return (
    Vinyl.isVinyl(file) ||
    file instanceof Vinyl ||
    (file && /function File\(/.test(file.constructor.toString()) && file.contents && file.path)
  );
}

/**
 * Check if a file exists (remote & local)
 * @param {string} href Path
 * @param {object} options Critical options
 * @returns {Promise<boolean>} Resolves to true if the file exists
 */
async function fileExists(href, options = {}) {
  if (isVinyl(href)) {
    return !href.isNull();
  }
  if (isRemote(href)) {
    const {got: fetchOptions = {}} = options;
    fetchOptions.method = 'head';
    try {
      const response = await fetch(href, {...options, got: fetchOptions});
      const {statusCode} = response;
      return parseInt(statusCode, 10) < 400;
    } catch (error) {
      return false;
    }
  }

  return fs.existsSync(href) || fs.existsSync(href.replace(/\?.*$/, ''));
}

/**
 * Path join considering urls
 * @param {string} base Base path part
 * @param {string} part Path part to append
 * @returns {string} Joined path/url
 */
function joinPath(base, part) {
  if (!part) {
    return base;
  }
  if (isRemote(base)) {
    return url.resolve(base, part);
  }

  return path.join(base, part.replace(/\?.*$/, ''));
}

/**
 * Resolve path
 * @param {string} href Path
 * @param {[string]} search Paths to search in
 * @param {object} options Critical options
 * @returns {Promise<string>} Resolves to found path, rejects with FileNotFoundError otherwise
 */
async function resolve(href, search = [], options = {}) {
  let exists = await fileExists(href, options);
  if (exists) {
    return href;
  }

  for (const ref of search) {
    const checkPath = joinPath(ref, href);
    exists = await fileExists(checkPath); /* eslint-disable-line no-await-in-loop */
    if (exists) {
      return checkPath;
    }
  }

  throw new FileNotFoundError(href, search);
}

/**
 * Glob pattern
 * @param {array|string} pattern Glob pattern
 * @param {string} base Critical base option
 * @returns {Promise<[string]>} Found files
 */
async function glob(pattern, {base} = {}) {
  // Evaluate globs based on base path
  const patterns = Array.isArray(pattern) ? pattern : [pattern];
  // Prepend base if it's not empty & not remote
  const prependBase = pattern => (base && !isRemote(base) ? [path.join(base, pattern)] : []);

  return reduceAsync(
    patterns,
    async (files, pattern) => {
      if (isGlob(pattern)) {
        const result = await globby([...prependBase(pattern), pattern]);
        return [...files, ...result];
      }

      return [...files, pattern];
    },
    []
  );
}

/**
 * Rebase image url in css
 *
 * @param {Buffer|string} css Stylesheet
 * @param {string} from Rebase from url
 * @param {string} to Rebase to url
 * @param {string|function} method Rebase method. See https://github.com/postcss/postcss-url#options-combinations
 * @returns {Buffer} Rebased css
 */
function rebaseAssets(css, from, to, method = 'rebase') {
  let rebased = css.toString();

  debug('Rebase assets', {from, to});

  if (/\/$/.test(to)) {
    to += 'temp.html';
  }

  if (/\/$/.test(from)) {
    from += 'temp.css';
  }

  if (isRemote(from)) {
    const {pathname} = url.parse(from);
    from = pathname;
  }

  if ((from && to) || typeof method === 'function') {
    rebased = postcss()
      .use(postcssUrl({url: method}))
      .process(css, {from, to}).css;
  }

  return Buffer.from(rebased);
}

/**
 * Token generated by concatenating username and password with `:` character within a base64 encoded string.
 * @param  {String} user User identifier.
 * @param  {String} pass Password.
 * @returns {String} Base64 encoded authentication token.
 */
const token = (user, pass) => Buffer.from([user, pass].join(':')).toString('base64');

/**
 * Get external resource. Try https and falls back to http
 * @param {string} uri Source uri
 * @param {object} options Options passed to critical
 * @param {boolean} secure Use https?
 * @returns {Promise<Buffer|response>} Resolves to fetched content or response object for HEAD request
 */
async function fetch(uri, options = {}, secure = true) {
  const {user, pass, userAgent, got: fetchOptions = {}} = options;
  const {headers = {}, method = 'get'} = fetchOptions;
  let resourceUrl = uri;
  let protocolRelative = false;

  // Consider protocol-relative urls
  if (/^\/\//.test(uri)) {
    protocolRelative = true;
    resourceUrl = url.resolve(`http${secure ? 's' : ''}://te.st`, uri);
  }

  fetchOptions.rejectUnauthorized = false;
  if (user && pass) {
    headers.Authorization = 'Basic ' + token(user, pass);
  }
  if (userAgent) {
    headers['User-Agent'] = userAgent;
  }

  debug(`Fetching resource: ${resourceUrl}`, {...fetchOptions, headers});

  try {
    const response = await got(resourceUrl, {...fetchOptions, headers});
    if (method === 'head') {
      return response;
    }

    return Buffer.from(response.body || '');
  } catch (error) {
    // Try again with http
    if (secure && protocolRelative) {
      debug(`${error.message} - trying again over http`);
      return fetch(uri, options, false);
    }

    debug(`${resourceUrl} failed: ${error.message}`);

    if (method === 'head') {
      return error.response;
    }

    if (error.response) {
      return Buffer.from(error.response.body || '');
    }

    throw error;
  }
}

/**
 * Extract stykesheet urls from html document
 * @param {Vinyl} file Vinyl file object (document)
 * @returns {[string]} Stylesheet urls from document source
 */
function getStylesheetHrefs(file) {
  if (!Vinyl.isVinyl(file)) {
    throw new Error('Parameter file needs to be a vinyl object');
  }

  const stylesheets = oust.raw(file.contents.toString(), 'stylesheets');
  const preloads = oust.raw(file.contents.toString(), 'preload');

  return [...stylesheets, ...preloads]
    .filter(link => link.$el.attr('media') !== 'print' && Boolean(link.value))
    .map(link => link.value);
}

/**
 * Extract asset urls from stylesheet
 * @param {Vinyl} file Vinyl file object (stylesheet)
 * @returns {[string]} Asset urls from stykesheet source
 */
function getAssets(file) {
  if (!Vinyl.isVinyl(file)) {
    throw new Error('Parameter file needs to be a vinyl object');
  }

  return parseCssUrls(file.contents.toString());
}

/**
 * Compute Path to Html document based on docroot
 * @param {Vinyl} file The file we want to check
 * @param {object} options Critical options object
 * @returns {Promise<string>} Computed path
 */
async function getDocumentPath(file, options = {}) {
  let {base} = options;

  // Check remote
  if (file.remote) {
    let {pathname} = file.urlObj;
    if (/\/$/.test(pathname)) {
      pathname += 'index.html';
    }

    return pathname;
  }

  // If we don't have a file path and
  if (!file.path) {
    return '';
  }

  if (base) {
    base = path.resolve(base);
    return `/${path.relative(base, file.path || base)}`;
  }

  // Check local and assume base path based on relative stylesheets
  if (file.stylesheets) {
    const relativeRefs = file.stylesheets.filter(href => isRelative(href));
    const absoluteRefs = file.stylesheets.filter(href => path.isAbsolute(href));

    // If we have no stylesheets inside, fall back to path relative to process cwd
    if (relativeRefs.length === 0 && absoluteRefs.length === 0) {
      process.stderr.write(BASE_WARNING);

      return `/${path.relative(process.cwd(), file.path)}`;
    }

    // Compute base path based on absolute links
    if (relativeRefs.length === 0) {
      const [ref] = absoluteRefs;
      const paths = await getAssetPaths(file, ref, options);
      try {
        const filepath = await resolve(ref, paths, options);
        return `/${path.relative(filepath.replace(ref, ''), file.path)}`;
      } catch (error) {
        process.stderr.write(BASE_WARNING);

        return `/${path.relative(process.cwd(), file.path)}`;
      }
    }

    // Compute path based on relative stylesheet links
    const dots = relativeRefs.reduce((res, href) => {
      const match = /^(\.\.\/)+/.exec(href);

      return match && match[0].length > res.length ? match[0] : res;
    }, './');

    const tmpBase = path.resolve(path.dirname(file.path), dots);

    return `/${path.relative(tmpBase, file.path)}`;
  }

  return '';
}

/**
 * Get path for remote stylesheet. Compares document host with stylesheet host
 * @param {object} fileObj Result of url.parse(style url)
 * @param {object} documentObj Result of url.parse(document url)
 * @param {string} filename Filename
 * @returns {string} Path to css (can be remote or local relative to document base)
 */
function getRemoteStylesheetPath(fileObj, documentObj, filename) {
  let {hostname: styleHost, port: stylePort, pathname} = fileObj;
  const {hostname: docHost, port: docPort} = documentObj || {};

  if (filename) {
    pathname = path.join(path.dirname(pathname), path.basename(filename));
    fileObj.pathname = pathname;
  }

  if (`${styleHost}:${stylePort}` === `${docHost}:${docPort}`) {
    return pathname;
  }

  return url.format(fileObj);
}

/**
 * Get path to stylesheet based on docroot
 * @param {Vinyl} document Optional reference document
 * @param {Vinyl} file the file we want to check
 * @param {object} options Critical options object
 * @returns {Promise<string>} Computed path
 */
async function getStylesheetPath(document, file, options = {}) {
  let {base} = options;

  // Check remote
  if (file.remote) {
    return getRemoteStylesheetPath(file.urlObj, document.urlObj);
  }

  // Generate path relative to document if stylesheet is referenced relative
  //
  if (isRelative(file.path) && document.path) {
    return path.join(path.dirname(document.path), file.path);
  }

  if (base && path.resolve(file.path).includes(path.resolve(base))) {
    base = path.resolve(base);
    return `/${path.relative(path.resolve(base), path.resolve(file.path))}`;
  }

  // Try to compute path based on document link tags with same name
  const stylesheet = document.stylesheets.find(href => {
    const {pathname} = url.parse(href);
    const name = path.basename(pathname);
    return name === path.basename(file.path);
  });

  if (stylesheet && isRelative(stylesheet) && document.path) {
    return path.join(path.dirname(document.path), stylesheet);
  }
  if (stylesheet && isRemote(stylesheet)) {
    return getRemoteStylesheetPath(url.parse(stylesheet), document.urlObj);
  }
  if (stylesheet) {
    return stylesheet;
  }

  // Try to find stylesheet path based on document link tags
  const [unsafestylesheet] = document.stylesheets.sort(a => (isRemote(a) ? 1 : -1));
  if (unsafestylesheet && isRelative(unsafestylesheet) && document.path) {
    return path.join(path.dirname(document.path), path.join(path.dirname(unsafestylesheet), path.basename(file.path)));
  }
  if (unsafestylesheet && isRemote(unsafestylesheet)) {
    return getRemoteStylesheetPath(url.parse(unsafestylesheet), document.urlObj, path.basename(file.path));
  }
  if (stylesheet) {
    return stylesheet;
  }

  process.stderr.write(BASE_WARNING);
  if (document.path && file.path) {
    return path.join(path.dirname(document.path), path.basename(file.path));
  }

  return '';
}

/**
 * Get a list of possible asset paths
 * Guess this is rather expensive so this method should only be used if
 * there's no other possible way
 *
 * @param {Vinyl} document Html document
 * @param {string} file File path
 * @param {object} options Critical options
 * @param {boolean} strict Check for file existance
 * @returns {Promise<[string]>} List of asset paths
 */
async function getAssetPaths(document, file, options = {}, strict = true) {
  const {base, rebase = {}, assetPaths = []} = options;
  const {history = [], url: docurl = '', urlObj} = document;
  const {from, to} = rebase;
  const [docpath] = history;

  if (isVinyl(file)) {
    return [];
  }

  // Remove double dots in the middle
  const normalized = path.join(file);
  // Count directory hops
  const hops = normalized.split('/').reduce((cnt, part) => (part === '..' ? cnt + 1 : cnt), 0);
  // Also findup first real dir path
  const [first] = normalized.split('/').filter(p => p && p !== '..');

  const mappedAssetPaths = base ? assetPaths.map(a => joinPath(base, a)) : [];

  // Make a list of possible paths
  const paths = [
    ...new Set([
      base,
      docurl,
      urlObj && url.format({...urlObj, pathname: path.dirname(urlObj.pathname), path: path.dirname(urlObj.path)}),
      docurl && url.resolve(docurl, file),
      docpath && path.dirname(docpath),
      ...assetPaths,
      ...mappedAssetPaths,
      to,
      from,
      base && docpath && path.join(base, path.dirname(docpath)),
      base && to && path.join(base, path.dirname(to)),
      base && from && path.join(base, path.dirname(from)),
      base && isRelative(file) && hops ? path.join(base, ...new Array(hops).fill('tmpdir'), file) : '',
      process.cwd(),
    ]),
  ];

  // Filter non existant paths
  const filtered = await filterAsync(paths, async f => {
    if (!f) {
      return false;
    }

    return !strict || fileExists(f);
  });

  // Findup first directory in search path and add to the list if available
  const all = await reduceAsync(
    [...new Set(filtered)],
    async (result, cwd) => {
      if (isRemote(cwd)) {
        return [...result, cwd];
      }
      const up = await findUp(first, {cwd});
      if (up) {
        const upDir = path.dirname(up);

        if (hops) {
          // Add additional directories based on dirHops
          const additional = path
            .relative(upDir, cwd)
            .split('/')
            .slice(0, hops);
          return [...result, upDir, path.join(upDir, ...additional)];
        }
        return [...result, upDir];
      }

      return result;
    },
    filtered
  );

  // Return uniquq result
  return [...new Set(all)];
}

/**
 * Create vinyl object from filepath
 * @param {object} src File descriptor either pass "filepath" or "html"
 * @param {object} options Critical options
 * @returns {Promise<Vinyl>} The vinyl object
 */
async function vinylize(src, options = {}) {
  const {filepath, html} = src;
  const {rebase = {}} = options;
  const file = new Vinyl();
  file.cwd = '/';
  file.remote = false;

  if (html) {
    const {to} = rebase;
    file.contents = Buffer.from(html);
    file.path = to || '';
  } else if (filepath && isVinyl(filepath)) {
    return filepath;
  } else if (filepath && isRemote(filepath)) {
    file.remote = true;
    file.url = filepath;
    file.urlObj = url.parse(filepath);
    file.contents = await fetch(filepath, options);
    file.path = file.urlObj.pathname;
  } else if (filepath && fs.existsSync(filepath)) {
    file.path = filepath;
    file.contents = await fs.readFile(filepath);
  } else {
    throw new FileNotFoundError(filepath);
  }

  return file;
}

/**
 * Get stylesheet file object
 * @param {Vinyl} document Document vinyl object
 * @param {string} filepath Path/Url to css file
 * @param {object} options Critical options
 * @returns {Promise<Vinyl>} Vinyl representation fo the stylesheet
 */
async function getStylesheet(document, filepath, options = {}) {
  const {rebase = {}, css, strict} = options;
  const {from, to} = rebase;
  const originalPath = filepath;
  const exists = await fileExists(filepath, options);

  if (!exists) {
    const searchPaths = await getAssetPaths(document, filepath, options);
    try {
      filepath = await resolve(filepath, searchPaths, options);
    } catch (error) {
      if (!isRemote(filepath) || strict) {
        throw error;
      }

      return new Vinyl();
    }
  }

  // Create absolute file paths for local files passed via css option
  // to prevent document relative stylesheet paths if they are not relative specified
  if (!isVinyl(filepath) && !isRemote(filepath) && css) {
    filepath = path.resolve(filepath);
  }

  const file = await vinylize({filepath}, options);

  // Restore original path for local files referenced from document and not from options
  if (!isRemote(originalPath) && !css) {
    file.path = originalPath;
  }

  // Get stylesheet path. Keeps stylesheet url if it differs from document url
  const stylepath = await getStylesheetPath(document, file, options);

  // We can safely rebase assets if we have:
  // - an url to the stylesheet
  // - if rebase.from and rebase.to is specified
  // - a valid document path and a stylesheet path
  // - an absolute positioned stylesheet so we can make the images absolute

  // First respect the user input
  if (from && to) {
    file.contents = rebaseAssets(file.contents, rebase.from, rebase.to);
  } else if (typeof rebase === 'function') {
    file.contents = rebaseAssets(file.contents, stylepath, document.path, rebase);
    // Next rebase to the stylesheet url
  } else if (isRemote(rebase.to || stylepath)) {
    file.contents = rebaseAssets(
      file.contents,
      rebase.from || stylepath,
      rebase.to || stylepath,
      asset => (isRemote(asset.originUrl) ? asset : url.resolve(rebase.to || stylepath, asset.relativePath))
    );

    // Use relative path to document (local)
  } else if (document.path) {
    file.contents = rebaseAssets(file.contents, rebase.from || stylepath, rebase.to || document.path);
  } else if (document.remote) {
    const {pathname} = document.urlObj;
    file.contents = rebaseAssets(file.contents, rebase.from || stylepath, rebase.to || pathname);

    // Make images absolute if we have an absolute positioned stylesheet
  } else if (path.isAbsolute(stylepath)) {
    file.contents = rebaseAssets(
      file.contents,
      rebase.from || stylepath,
      rebase.to || '/index.html',
      asset => asset.absolutePath
    );
  } else {
    warn(`Not rebasing assets for ${originalPath}. Use "rebase" option`);
  }

  return file;
}

/**
 * Get css for document
 * @param {Vinyl} document Vinyl representation of HTML document
 * @param {object} options Critical options
 * @returns {Promise<string>} Css string unoptimized, Multiple stylesheets are concatenated with EOL
 */
async function getCss(document, options = {}) {
  const {css} = options;
  let stylesheets = [];

  if (css) {
    const files = await glob(css, options);
    stylesheets = await mapAsync(files, async file => getStylesheet(document, file, options));
  } else {
    stylesheets = await mapAsync(document.stylesheets, async file => getStylesheet(document, file, options));
  }

  return stylesheets
    .filter(stylesheet => !stylesheet.isNull())
    .map(stylesheet => stylesheet.contents.toString())
    .join(os.EOL);
}

/**
 * Get document file object
 * @param {string} filepath Path/Url to html file
 * @param {object} options Critical options
 * @returns {Promise<Vinyl>} Vinyl representation of HTML document
 */
async function getDocument(filepath, options = {}) {
  const {rebase = {}, base} = options;

  if (!isVinyl(filepath) && !isRemote(filepath) && !fs.existsSync(filepath) && base) {
    filepath = path.join(base, filepath);
  }

  const document = await vinylize({filepath}, options);

  document.stylesheets = await getStylesheetHrefs(document);
  document.path = rebase.to || (await getDocumentPath(document, options));
  document.css = await getCss(document, options);

  if (!document.remote && fs.existsSync(filepath)) {
    document.url = `file://${path.resolve(filepath)}`;

    // Store document as we need a file or url for penthouse
  } else if (!document.remote) {
    const file = tempy.file({extension: 'html'});
    await fs.writeFile(file, document.contents);

    document.url = `file://${file}`;
  }

  return document;
}

/**
 * Get document file object from raw html source
 * @param {string} html HTML source
 * @param {object} options Critical options
 * @returns {Promise<*>} Vinyl representation of HTML document
 */
async function getDocumentFromSource(html, options = {}) {
  const {rebase = {}} = options;
  const document = await vinylize({html}, options);

  document.stylesheets = await getStylesheetHrefs(document);
  document.path = rebase.to || (await getDocumentPath(document, options));

  document.css = await getCss(document, options);

  // Store document as we need a file or url for penthouse
  if (!document.url) {
    const file = tempy.file({extension: 'html'});
    await fs.writeFile(file, document.contents);

    document.url = `file://${file}`;
  }

  return document;
}

module.exports = {
  BASE_WARNING,
  normalizePath,
  isRemote,
  token,
  fileExists,
  resolve,
  joinPath,
  vinylize,
  getStylesheetHrefs,
  getAssets,
  getAssetPaths,
  getDocumentPath,
  getStylesheetPath,
  getStylesheet,
  getDocument,
  getDocumentFromSource,
};
